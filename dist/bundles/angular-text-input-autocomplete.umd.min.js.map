{"version":3,"sources":["ng://angular-text-input-autocomplete/text-input-autocomplete-menu.component.ts","ng://angular-text-input-autocomplete/text-input-autocomplete.directive.ts","ng://angular-text-input-autocomplete/text-input-autocomplete-container.component.ts","ng://angular-text-input-autocomplete/text-input-autocomplete.module.ts"],"names":["TextInputAutocompleteMenuComponent","Subject","index","choice","id","Object","defineProperty","prototype","this","_choices","choices","indexOf","activeChoice","length","onArrowDown","event","preventDefault","scrollToChoice","onArrowUp","onEnter","selectChoice","next","dropdownMenuElement","ulPosition","nativeElement","getBoundingClientRect","li","children","liPosition","top","scrollIntoView","bottom","Component","args","selector","template","styles","ViewChild","HostListener","TextInputAutocompleteDirective","componentFactoryResolver","viewContainerRef","injector","elm","EventEmitter","findChoices","searchText","_this","filter","c","labelKey","toLowerCase","includes","valueKey","onKeypress","key","triggerCharacter","showMenu","onChange","value","menu","triggerCharacterPosition","hideMenu","cursor","selectionStart","slice","match","searchRegexp","component","instance","choiceLoadError","undefined","choiceLoading","changeDetectorRef","detectChanges","Promise","resolve","then","catch","err","onBlur","lastCaretPosition","menuFactory","resolveComponentFactory","menuComponent","createComponent","lineHeight","getComputedStyle","replace","_a","getCaretCoordinates","top_1","left","position","pipe","takeUntil","menuHidden$","subscribe","label","getChoiceLabel","textarea","startIndex","start","caretPosition","end","dispatchEvent","Event","setCursorAt","setSelectionRange","focus","choiceSelected","emit","insertedAt","menuShown","destroy","menuHidden","ngOnDestroy","Directive","ComponentFactoryResolver","ViewContainerRef","Injector","ElementRef","Input","Output","TextInputAutocompleteContainerComponent","TextInputAutocompleteModule","NgModule","declarations","imports","CommonModule","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'mwl-text-input-autocomplete-menu',\n  template: `\n    <ul \n      *ngIf=\"choices?.length > 0\"\n      #dropdownMenu\n      class=\"dropdown-menu\"\n      [style.top.px]=\"position?.top\"\n      [style.left.px]=\"position?.left\">\n      <li\n        *ngFor=\"let choice of choices; trackBy:trackById\"\n        [class.active]=\"activeChoice === choice\">\n        <a\n          href=\"javascript:;\"\n          (click)=\"selectChoice.next(choice)\">\n          {{ choice[labelKey] ?  choice[labelKey] : choice }}\n        </a>\n      </li>\n    </ul>\n  `,\n  styles: [\n    `\n      .dropdown-menu {\n        display: block;\n        max-height: 200px;\n        overflow-y: auto;\n      }\n    `\n  ]\n})\nexport class TextInputAutocompleteMenuComponent {\n  @ViewChild('dropdownMenu') dropdownMenuElement: ElementRef<HTMLUListElement>;\n  position: { top: number; left: number };\n  selectChoice = new Subject();\n  activeChoice: any;\n  searchText: string;\n  choiceLoadError: any;\n  choiceLoading = false;\n  labelKey = 'name';\n  private _choices: any[];\n  trackById = (index: number, choice: any) =>\n    typeof choice.id !== 'undefined' ? choice.id : choice;\n\n  set choices(choices: any[]) {\n    this._choices = choices;\n    if (choices.indexOf(this.activeChoice) === -1 && choices.length > 0) {\n      this.activeChoice = choices[0];\n    }\n  }\n\n  get choices() {\n    return this._choices;\n  }\n\n  @HostListener('document:keydown.ArrowDown', ['$event'])\n  onArrowDown(event: KeyboardEvent) {\n    event.preventDefault();\n    const index = this.choices.indexOf(this.activeChoice);\n    if (this.choices[index + 1]) {\n      this.scrollToChoice(index + 1);\n    }\n  }\n\n  @HostListener('document:keydown.ArrowUp', ['$event'])\n  onArrowUp(event: KeyboardEvent) {\n    event.preventDefault();\n    const index = this.choices.indexOf(this.activeChoice);\n    if (this.choices[index - 1]) {\n      this.scrollToChoice(index - 1);\n    }\n  }\n\n  @HostListener('document:keydown.Enter', ['$event'])\n  onEnter(event: KeyboardEvent) {\n    if (this.choices.indexOf(this.activeChoice) > -1) {\n      event.preventDefault();\n      this.selectChoice.next(this.activeChoice);\n    }\n  }\n\n  private scrollToChoice(index: number) {\n    this.activeChoice = this._choices[index];\n    if (this.dropdownMenuElement) {\n      const ulPosition = this.dropdownMenuElement.nativeElement.getBoundingClientRect();\n      const li = this.dropdownMenuElement.nativeElement.children[index];\n      const liPosition = li.getBoundingClientRect();\n      if (liPosition.top < ulPosition.top) {\n        li.scrollIntoView();\n      } else if (liPosition.bottom > ulPosition.bottom) {\n        li.scrollIntoView(false);\n      }\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Injector,\n  Input,\n  OnDestroy,\n  Output,\n  ViewContainerRef\n} from '@angular/core';\nimport getCaretCoordinates from 'textarea-caret';\nimport { takeUntil } from 'rxjs/operators';\nimport { TextInputAutocompleteMenuComponent } from './text-input-autocomplete-menu.component';\nimport { Subject } from 'rxjs';\n\nexport interface ChoiceSelectedEvent {\n  choice: any;\n  insertedAt: {\n    start: number;\n    end: number;\n  };\n}\n\n@Directive({\n  selector:\n    'textarea[mwlTextInputAutocomplete],input[type=\"text\"][mwlTextInputAutocomplete]'\n})\nexport class TextInputAutocompleteDirective implements OnDestroy {\n  /**\n   * The character that will trigger the menu to appear\n   */\n  @Input() triggerCharacter = '@';\n\n  /**\n   * The regular expression that will match the search text after the trigger character\n   */\n  @Input() searchRegexp = /^\\w*$/;\n\n  /**\n   * The menu component to show with available options.\n   * You can extend the built in `TextInputAutocompleteMenuComponent` component to use a custom template\n   */\n  @Input() menuComponent = TextInputAutocompleteMenuComponent;\n\n  /**\n   * Called when the options menu is shown\n   */\n  @Output() menuShown = new EventEmitter();\n\n  /**\n   * Called when the options menu is hidden\n   */\n  @Output() menuHidden = new EventEmitter();\n\n  /**\n   * Called when a choice is selected\n   */\n  @Output() choiceSelected = new EventEmitter<ChoiceSelectedEvent>();\n\n  /**\n   * A function that formats the selected choice once selected.\n   */\n  @Input() getChoiceLabel: (choice: any) => string = choice => choice;\n\n  /* tslint:disable member-ordering */\n  @Input() valueKey: string = 'id';\n\n  @Input() labelKey: string = 'name';\n\n  @Input() choices: any[];\n\n  private menu:\n    | {\n        component: ComponentRef<TextInputAutocompleteMenuComponent>;\n        triggerCharacterPosition: number;\n        lastCaretPosition?: number;\n      }\n    | undefined;\n\n  private menuHidden$ = new Subject();\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    private injector: Injector,\n    private elm: ElementRef\n  ) {}\n\n  findChoices(searchText: string) {\n    return this.choices.filter(\n      c =>\n        c[this.labelKey].toLowerCase().includes(searchText.toLowerCase()) ||\n        c[this.valueKey] == searchText\n    );\n  }\n\n  @HostListener('keypress', ['$event.key'])\n  onKeypress(key: string) {\n    if (key === this.triggerCharacter) {\n      this.showMenu();\n    }\n  }\n\n  @HostListener('input', ['$event.target.value'])\n  onChange(value: string) {\n    if (this.menu) {\n      if (value[this.menu.triggerCharacterPosition] !== this.triggerCharacter) {\n        this.hideMenu();\n      } else {\n        const cursor = this.elm.nativeElement.selectionStart;\n        if (cursor < this.menu.triggerCharacterPosition) {\n          this.hideMenu();\n        } else {\n          const searchText = value.slice(\n            this.menu.triggerCharacterPosition + 1,\n            cursor\n          );\n          if (!searchText.match(this.searchRegexp)) {\n            this.hideMenu();\n          } else {\n            this.menu.component.instance.searchText = searchText;\n            this.menu.component.instance.choices = [];\n            this.menu.component.instance.labelKey = this.labelKey;\n            this.menu.component.instance.choiceLoadError = undefined;\n            this.menu.component.instance.choiceLoading = true;\n            this.menu.component.changeDetectorRef.detectChanges();\n            Promise.resolve(this.findChoices(searchText))\n              .then(choices => {\n                if (this.menu) {\n                  this.menu.component.instance.choices = choices;\n                  this.menu.component.instance.choiceLoading = false;\n                  this.menu.component.changeDetectorRef.detectChanges();\n                }\n              })\n              .catch(err => {\n                if (this.menu) {\n                  this.menu.component.instance.choiceLoading = false;\n                  this.menu.component.instance.choiceLoadError = err;\n                  this.menu.component.changeDetectorRef.detectChanges();\n                }\n              });\n          }\n        }\n      }\n    }\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    if (this.menu) {\n      this.menu.lastCaretPosition = this.elm.nativeElement.selectionStart;\n    }\n  }\n\n  private showMenu() {\n    if (!this.menu) {\n      const menuFactory = this.componentFactoryResolver.resolveComponentFactory<\n        TextInputAutocompleteMenuComponent\n      >(this.menuComponent);\n      this.menu = {\n        component: this.viewContainerRef.createComponent(\n          menuFactory,\n          0,\n          this.injector\n        ),\n        triggerCharacterPosition: this.elm.nativeElement.selectionStart\n      };\n      const lineHeight = +getComputedStyle(\n        this.elm.nativeElement\n      ).lineHeight!.replace(/px$/, '');\n      const { top, left } = getCaretCoordinates(\n        this.elm.nativeElement,\n        this.elm.nativeElement.selectionStart\n      );\n      this.menu.component.instance.position = {\n        top: top + lineHeight,\n        left\n      };\n      this.menu.component.changeDetectorRef.detectChanges();\n      this.menu.component.instance.selectChoice\n        .pipe(takeUntil(this.menuHidden$))\n        .subscribe(choice => {\n          const label = this.getChoiceLabel(choice);\n          const textarea: HTMLTextAreaElement = this.elm.nativeElement;\n          const value: string = textarea.value;\n          const startIndex = this.menu!.triggerCharacterPosition;\n          const start = value.slice(0, startIndex);\n          const caretPosition =\n            this.menu!.lastCaretPosition || textarea.selectionStart;\n          const end = value.slice(caretPosition);\n          textarea.value = start + label + end;\n          // force ng model / form control to update\n          textarea.dispatchEvent(new Event('input'));\n          this.hideMenu();\n          const setCursorAt = (start + label).length;\n          textarea.setSelectionRange(setCursorAt, setCursorAt);\n          textarea.focus();\n          this.choiceSelected.emit({\n            choice,\n            insertedAt: {\n              start: startIndex,\n              end: startIndex + label.length\n            }\n          });\n        });\n      this.menuShown.emit();\n    }\n  }\n\n  private hideMenu() {\n    if (this.menu) {\n      this.menu.component.destroy();\n      this.menuHidden$.next();\n      this.menuHidden.emit();\n      this.menu = undefined;\n    }\n  }\n\n  ngOnDestroy() {\n    this.hideMenu();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'mwl-text-input-autocomplete-container',\n  styles: [\n    `\n    :host {\n      position: relative;\n      display: block;\n    }\n  `\n  ],\n  template: '<ng-content></ng-content>'\n})\nexport class TextInputAutocompleteContainerComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TextInputAutocompleteDirective } from './text-input-autocomplete.directive';\nimport { TextInputAutocompleteContainerComponent } from './text-input-autocomplete-container.component';\nimport { TextInputAutocompleteMenuComponent } from './text-input-autocomplete-menu.component';\n\n@NgModule({\n  declarations: [\n    TextInputAutocompleteDirective,\n    TextInputAutocompleteContainerComponent,\n    TextInputAutocompleteMenuComponent\n  ],\n  imports: [CommonModule],\n  exports: [\n    TextInputAutocompleteDirective,\n    TextInputAutocompleteContainerComponent,\n    TextInputAutocompleteMenuComponent\n  ],\n  entryComponents: [TextInputAutocompleteMenuComponent]\n})\nexport class TextInputAutocompleteModule {}\n"]}